0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'frontend/' ]
2 info using npm@2.1.7
3 info using node@v0.10.33
4 verbose node symlink /usr/local/bin/node
5 silly cache add args [ 'frontend/', null ]
6 verbose cache add spec frontend/
7 silly cache add parsed spec { raw: 'frontend/',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: 'frontend/',
7 silly cache add   spec: '/Users/glauberbrennon/Documents/Prog/shareddomain/frontend',
7 silly cache add   type: 'directory' }
8 verbose tar pack [ '/Users/glauberbrennon/.npm/fox-angular-gulp-workflow/0.1.0/package.tgz',
8 verbose tar pack   '/Users/glauberbrennon/Documents/Prog/shareddomain/frontend' ]
9 verbose tarball /Users/glauberbrennon/.npm/fox-angular-gulp-workflow/0.1.0/package.tgz
10 verbose folder /Users/glauberbrennon/Documents/Prog/shareddomain/frontend
11 info prepublish fox-angular-gulp-workflow@0.1.0
12 verbose addLocalTarball adding from inside cache /Users/glauberbrennon/.npm/fox-angular-gulp-workflow/0.1.0/package.tgz
13 silly cache afterAdd fox-angular-gulp-workflow@0.1.0
14 verbose afterAdd /Users/glauberbrennon/.npm/fox-angular-gulp-workflow/0.1.0/package/package.json not in flight; writing
15 verbose afterAdd /Users/glauberbrennon/.npm/fox-angular-gulp-workflow/0.1.0/package/package.json written
16 silly install resolved [ { name: 'fox-angular-gulp-workflow',
16 silly install resolved     version: '0.1.0',
16 silly install resolved     description: 'A workflow for Angular made with Gulp',
16 silly install resolved     scripts: { install: 'bower install', test: 'gulp testem' },
16 silly install resolved     repository:
16 silly install resolved      { type: 'git',
16 silly install resolved        url: 'https://github.com/Foxandxss/fox-angular-gulp-workflow.git' },
16 silly install resolved     author: { name: 'Jesus Rodriguez' },
16 silly install resolved     license: 'MIT',
16 silly install resolved     bugs: { url: 'https://github.com/Foxandxss/fox-angular-gulp-workflow/issues' },
16 silly install resolved     homepage: 'https://github.com/Foxandxss/fox-angular-gulp-workflow',
16 silly install resolved     devDependencies:
16 silly install resolved      { 'connect-history-api-fallback': '0.0.5',
16 silly install resolved        del: '^0.1.3',
16 silly install resolved        'event-stream': '^3.1.7',
16 silly install resolved        gulp: '^3.8.8',
16 silly install resolved        'gulp-angular-templatecache': '^1.3.0',
16 silly install resolved        'gulp-concat': '^2.3.4',
16 silly install resolved        'gulp-connect': '^2.0.6',
16 silly install resolved        'gulp-if': '^1.2.4',
16 silly install resolved        'gulp-jshint': '^1.8.5',
16 silly install resolved        'gulp-load-plugins': '^0.7.0',
16 silly install resolved        'gulp-minify-css': '^0.3.8',
16 silly install resolved        'gulp-minify-html': '^0.1.4',
16 silly install resolved        'gulp-ng-annotate': '^0.3.0',
16 silly install resolved        'gulp-rename': '^1.2.0',
16 silly install resolved        'gulp-rev': '^2.0.1',
16 silly install resolved        'gulp-sass': '^0.7.3',
16 silly install resolved        'gulp-sourcemaps': '^1.2.4',
16 silly install resolved        'gulp-template': '^1.1.1',
16 silly install resolved        'gulp-testem': '0.0.1',
16 silly install resolved        'gulp-uglify': '^1.0.1',
16 silly install resolved        'gulp-util': '^3.0.1',
16 silly install resolved        'jshint-stylish': '^1.0.0',
16 silly install resolved        'proxy-middleware': '^0.6.0' },
16 silly install resolved     readme: '# Fox\'s Angular.js Gulp Workflow\n\nHere is *yet another angular boilerplate* opinionated in how I work with Angular. I made it for myself but if you find that my opinions are good for you, feel free to use it and collaborate with issues or pull requests.\n\nLet\'s start with the `app` folder:\n\n![App folder](http://i.imgur.com/Fppy0Ge.png)\n\nIn the `app` folder you can find 3 subdirectories:\n\n* **images**: You can put there the images you need, nothing special here.\n* **scss**: There is a `main.scss` file there were you import all your other `.scss` files.\n* **js**: There is where you put your javascript code. It comes with a `app.js` file with the main `app` module created.\n\nYou can also find:\n\n**index.html**: It is only the basic skeleton with the angular application loaded. It is a `lodash template` so we can have cache-busting on production.\n\n## Structuring your Angular app in the `js` folder.\n\nWe split our application per `features`, so if we have an application to manage `users`, we can decide that a page to manage those `users` is a feature and also the `settings` page is another feature. Also we need some authentication services and stuff like that. That is not a feature of our app, but something **common** to the entire app. How can we organize that?\n\n![App structure](http://i.imgur.com/RtlhXuE.png)\n\nLooking at the image, we can see that `features` folder where we put all our features. We create a subdirectory with the feature name and then inside a `javascript` file to code that feature and also a `.tpl.html` file for its template. the `.tpl.html` is my convention, you can change that in the `gulpfile.js`.\n\nIf a feature gets big enough, you can create multiple `.js` files, that is not a problem.\n\nFor **common** stuff, we created a `common` folder where we can put all our `services` and `directives`. Notice how I put the `foo` directive template inside the same folder.\n\nThe workflow won\'t force you to use this structure, the only forced convention here is to put your templates under `/js` and not under `/templates` or something like that. Also the extension being `*.tpl.html` is needed (again, easy to change in the `gulpfile.js`). Leaving that aside, you\'re free to code your app in the way you like.\n\n```javascript\nappTemplates:     \'app/js/**/*.tpl.html\',\n```\n\n## Testing your app\n\nThe only convention here is to name your tests like: `*_spec.js`. Leaving that aside, you can structure it the way you like.\n\nYou can do it per features like our main code or organize them per type (`controllers`, `directives`, etc.).\n\nAs a test runner we are using `test\'em`, `jasmine 2` as the framework of choice and `Chrome` to run the tests. You can change `jasmine` and `Chrome` in `testem.json`.\n\n```json\n{\n  "framework" : "jasmine2",\n  "launch_in_dev" : ["Chrome"],\n  "src_files" : [\n    "tmp/js/app.js",\n    "vendor/angular-mocks/angular-mocks.js",\n    "spec/**/*_spec.js"\n  ]\n}\n```\n\n## Talking with the backend\n\nOur angular app will run on the port `5000` and by default all the requests to the backend are going to use a `proxy` to the port `8080`. How does that work?\n\nImagine you have a `Rails` backend (the workflow is backend agnostic) running on port `8080` and it serves some `users` information at `/api/users`. Since the `Rails` app runs on port `8080` and our `Angular` app runs on the port `5000` we would need to do something like:\n\n```javascript\n$http.get(\'localhost:8080/api/users\');\n```\nAnd then activate `CORS` in our `Rails` app. That is not needed here, we can safely do:\n\n```javascript\n$http.get(\'/api/users\');\n```\nWithout any need of `CORS`. Thanks to our `proxy`, our `Angular` app will think that the backend is running in the same domain and port so if we deploy both application together (like putting our `angular` app into `Rails\'` `/public` directory) we don\'t need to change anything in our code.\n\n```javascript\ngulp.task(\'webserver\', [\'indexHtml-dev\', \'images-dev\'], function() {\n  plugins.connect.server({\n    root: paths.tmpFolder,\n    port: 5000,\n    livereload: true,\n    middleware: function(connect, o) {\n        return [ (function() {\n            var url = require(\'url\');\n            var proxy = require(\'proxy-middleware\');\n            var options = url.parse(\'http://localhost:8080/api\');\n            options.route = \'/api\';\n            return proxy(options);\n        })(), historyApiFallback ];\n    }\n  });\n});\n```\n\nThere you change our app port and also the port where our backend is running. Also notice that the requests that goes through the `proxy` are the ones that starts with `/api`.\n\n## The gulp tasks\n\nTo run our tasks and watch for file changes, we just need to run:\n\n```\n$ gulp\n```\n\nThat will generate a `tmp` folder with all our `javascript` files concatenated in one central place. That free us of having to create a `<script>` tag for every javascript we create. Also, our `templates` are going to be cached in `$templateCache` and also appended to the main `app.js` file.\n\nAlso that will compile our `scss`, move our images and compile our `index.hbs`, run the webserver and watch for file changes.\n\nAll our `javascript` are going to be linted by `jshint`.\n\nTo run our tests, having that `gulp` watching our files for changes, we can do in another terminal:\n\n```\n$ gulp testem\n```\nThat will fire `test\'em` which will grab all our changes and re-run the tests.\n\n## Compiling your project for production\n\nWhen you finish your project and you need to generate the final result with all your assets minified and your Angular annotated (for minification purposes), you can do:\n\n```\n$ gulp production\n```\n\nThat will generate a `dist` folder and you can safely move its content to a backend `/public` folder or serve it as is.\n\n## Managing vendors\n\nFor the vendors this workflow uses `bower`.\n\nAll the bower packages are installed directly on `/vendor` so if you want to install `angular-toastr` for example, you only need to:\n\n```\n$ bower install angular-toastr --save\n```\n\nThat will install `angular-toastr` on `/vendor` and also save it on the `bower.json`.\n\nThen you will need to tell `Gulp` that you want to load it, for that you need to open `/vendor/manifest.js` and modify it like:\n\n```javascript\nexports.javascript = [\n  \'vendor/angular/angular.js\',\n  \'vendor/lodash/dist/lodash.js\',\n  \'vendor/angular-toastr/dist/angular-toastr.js\'\n];\n```\n\nThere is also a `css` array:\n\n```javascript\nexports.css = [\n\n];\n```\n\nBy default this project comes with `angular` and `lodash` already loaded for you.\n\n**NOTE**: `npm install` will also do a `bower install`.\n\n## Known Issues\n\nSometimes when adding new files (and the watch is running) you can see errors regarding sourcemaps. A restart of gulp fix that.\n\n## TODO\n\n* Proxying for sockets\n* If you add new stuff to `/vendor/manifest.js` you will need to restart `Gulp`.\n* Fix possible issues, this need to be used on real projects yet :P\n* Anything you want?\n',
16 silly install resolved     readmeFilename: 'README.md',
16 silly install resolved     _id: 'fox-angular-gulp-workflow@0.1.0',
16 silly install resolved     _shasum: '316980b402044ddee0989a463db35a2cc032e109',
16 silly install resolved     _from: 'frontend' } ]
17 info install fox-angular-gulp-workflow@0.1.0 into /Users/glauberbrennon/Documents/Prog/shareddomain
18 info installOne fox-angular-gulp-workflow@0.1.0
19 verbose installOne of fox-angular-gulp-workflow to /Users/glauberbrennon/Documents/Prog/shareddomain not in flight; installing
20 verbose lock using /Users/glauberbrennon/.npm/_locks/fox-angular-gulp-workflo-135ea5f34b7496ad.lock for /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
21 silly install write writing fox-angular-gulp-workflow 0.1.0 to /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
22 silly cache addNamed cb fox-angular-gulp-workflow@0.1.0
23 verbose unbuild node_modules/fox-angular-gulp-workflow
24 verbose gentlyRm vacuuming /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
25 verbose tar unpack /Users/glauberbrennon/.npm/fox-angular-gulp-workflow/0.1.0/package.tgz
26 verbose tar unpacking to /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
27 verbose gentlyRm vacuuming /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
28 silly gunzTarPerm modes [ '755', '644' ]
29 silly gunzTarPerm extractEntry package.json
30 silly gunzTarPerm extractEntry .npmignore
31 silly gunzTarPerm extractEntry README.md
32 silly gunzTarPerm extractEntry gulpfile.js
33 silly gunzTarPerm extractEntry app/images/.gitkeep
34 silly gunzTarPerm extractEntry app/index.html
35 silly gunzTarPerm extractEntry app/js/app.js
36 silly gunzTarPerm extractEntry app/scss/main.scss
37 silly gunzTarPerm extractEntry .bowerrc
38 silly gunzTarPerm extractEntry .editorconfig
39 silly gunzTarPerm extractEntry bower.json
40 silly gunzTarPerm extractEntry .jshintrc
41 silly gunzTarPerm extractEntry LICENSE.md
42 silly gunzTarPerm extractEntry spec/helpers/.gitkeep
43 silly gunzTarPerm extractEntry testem.json
44 silly gunzTarPerm extractEntry vendor/manifest.js
45 info preinstall fox-angular-gulp-workflow@0.1.0
46 silly install resolved []
47 verbose about to build /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
48 info build /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
49 verbose linkStuff [ false,
49 verbose linkStuff   false,
49 verbose linkStuff   false,
49 verbose linkStuff   '/Users/glauberbrennon/Documents/Prog/shareddomain/node_modules' ]
50 info linkStuff fox-angular-gulp-workflow@0.1.0
51 verbose linkBins fox-angular-gulp-workflow@0.1.0
52 verbose linkMans fox-angular-gulp-workflow@0.1.0
53 verbose rebuildBundles fox-angular-gulp-workflow@0.1.0
54 info install fox-angular-gulp-workflow@0.1.0
55 verbose unsafe-perm in lifecycle true
56 info fox-angular-gulp-workflow@0.1.0 Failed to exec install script
57 verbose unlock done using /Users/glauberbrennon/.npm/_locks/fox-angular-gulp-workflo-135ea5f34b7496ad.lock for /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
58 verbose stack Error: fox-angular-gulp-workflow@0.1.0 install: `bower install`
58 verbose stack Exit status 127
58 verbose stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:212:16)
58 verbose stack     at ChildProcess.emit (events.js:98:17)
58 verbose stack     at maybeClose (child_process.js:756:16)
58 verbose stack     at Process.ChildProcess._handle.onexit (child_process.js:823:5)
59 verbose pkgid fox-angular-gulp-workflow@0.1.0
60 verbose cwd /Users/glauberbrennon/Documents/Prog/shareddomain
61 error Darwin 13.4.0
62 error argv "node" "/usr/local/bin/npm" "install" "frontend/"
63 error node v0.10.33
64 error npm  v2.1.7
65 error code ELIFECYCLE
66 error fox-angular-gulp-workflow@0.1.0 install: `bower install`
66 error Exit status 127
67 error Failed at the fox-angular-gulp-workflow@0.1.0 install script.
67 error This is most likely a problem with the fox-angular-gulp-workflow package,
67 error not with npm itself.
67 error Tell the author that this fails on your system:
67 error     bower install
67 error You can get their info via:
67 error     npm owner ls fox-angular-gulp-workflow
67 error There is likely additional logging output above.
68 verbose exit [ 1, true ]
69 verbose unbuild node_modules/fox-angular-gulp-workflow
70 info preuninstall fox-angular-gulp-workflow@0.1.0
71 info uninstall fox-angular-gulp-workflow@0.1.0
72 verbose unbuild rmStuff fox-angular-gulp-workflow@0.1.0 from /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules
73 info postuninstall fox-angular-gulp-workflow@0.1.0
74 verbose gentlyRm vacuuming /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
75 silly gentlyRm purging /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules/fox-angular-gulp-workflow
76 silly gentlyRm removing /Users/glauberbrennon/Documents/Prog/shareddomain/node_modules
77 silly gentlyRm quitting because other entries in /Users/glauberbrennon/Documents/Prog/shareddomain
